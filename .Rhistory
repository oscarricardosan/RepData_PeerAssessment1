plot(x, y, pch=18)
plot(x, y, pch=14)
plot(x, y, pch=8)
plot(x, y, pch=24)
plot(x, y, pch=25)
plot(x, y, pch=21)
plot(x, y, pch=1)
plot(x, y, pch=1)
plot(x, y, pch=21)
plot(x, y, pch=20)
title("Scatterplot")
text(-2, -2, "Label")
text("top√±eft", legend= "Label")
text("topleft", legend= "Label")
text("topleft", legend = "Label")
legend("topleft", legend = "Label")
legend("topleft", legend = "Data")
legend("topleft", legend = "Data", pch=20)
fit <- lm(y ~ x)
fit <- lm(y ~ x)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd)
abline(fit, lwd=2)
abline(fit, lwd=3)
abline(fit, lwd=3, col='blue')
plot(x, y, xlab = "Width", ylab = "Height", main = "Scatterplot")
plot(x, y, xlab = "Width", ylab = "Height", main = "Scatterplot", pch=20)
legend('topright','Data', pch = 20)
fit<- lm(y ~ x)
abline(fit, lwd=3, col="red")
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par("mar")
par(mar = c(1,2,2,1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mar = c(1,1,1,1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(omar = c(1,1,1,1))
?par(omar = c(1,1,1,1))
par(omar = c(2,2,1,1))
par(mar = c(2,2,1,1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mfrow(1,2))
par(mfrow=c(1,2))
plot(x, y, pch = 20)
plot(x, z, pch = 20)
par(mar = c(4,4,2,2))
plot(x, z, pch = 20)
plot(x, y, pch = 20)
par(mfrow = c(1,1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
g
g <- gl(2, 50, labels = c("Male", "Female"))
g
strg(g)
str(g)
plot(x, y)
plot(x, y, type = 'n')
points(x[g == 'Male'], y[g == 'Male'], col="green"))
points(x[g == 'Male'], y[g == 'Male'], col="green")
points(x[g == 'Female'], y[g == 'Female'], col="blue")
points(x[g == 'Female'], y[g == 'Female'], col="blue", pch = 19)
points(x[g == 'Male'], y[g == 'Male'], col="green", pch=19)
?deviance
?Devices
svg(filename = if(onefile) "Rplots.svg" else "Rplot%03d.svg",
width = 7, height = 7, pointsize = 12,
onefile = FALSE, family = "sans", bg = "white",
antialias = c("default", "none", "gray", "subpixel"))
svg(filename = Rplots.svg",
width = 7, height = 7, pointsize = 12,
onefile = FALSE, family = "sans", bg = "white",
antialias = c("default", "none", "gray", "subpixel"))
svg(filename = Rplots.svg",
width = 7, height = 7, pointsize = 12,
onefile = FALSE, family = "sans", bg = "white",
antialias = c("default", "none", "gray", "subpixel")
svg(filename = Rplots.svg",
width = 7, height = 7, pointsize = 12,
onefile = FALSE, family = "sans", bg = "white")
svg(filename = "Rplots.svg",
width = 7, height = 7, pointsize = 12,
onefile = FALSE, family = "sans", bg = "white",
antialias = c("default", "none", "gray", "subpixel")
)
plot)1,3
plot(1,3)
svg(filename = "Rplots.svg")
plot(1,3)
qplot(1,1)
xyplot(1,1)
plot(1,1)
windows()
plot(1,1)
windows(width, height, pointsize, record, rescale, xpinch, ypinch,
bg, canvas, gamma, xpos, ypos, buffered, title,
restoreConsole, clickToConfirm, fillOddEven,
family, antialias)
wwindows(width, height, pointsize, record, rescale, xpinch, ypinch,
bg, canvas, gamma, xpos, ypos, buffered, title,
restoreConsole, clickToConfirm, fillOddEven,
family, antialias)
windows()
plot(1,1)
plot(1,1)
library(datasets)
with(faithful, plot(eruptions, waiting))
pdf(fie="myplot.pdf")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
dev.off()
svg(file="myplot.svg")
with(faithful, plot(eruptions, waiting))
dev.off()
svg(file="myplot.svg")
with(faithful, plot(eruptions, waiting, v= 15))
with(faithful, plot(eruptions, waiting); abline(v = 3, col="red", lwd=3)
with(faithful, plot(eruptions, waiting, v= 15)))
with(faithful, plot(eruptions, waiting); abline(v = 3, col="red", lwd=3))
with(faithful, plot(eruptions, waiting), abline(v = 3, col="red", lwd=3))
dev.off()
with(faithful, plot(eruptions, waiting), abline(v = 3, col="red", lwd=3))
with(faithful, plot(eruptions, waiting), abline(h = 3, col="red", lwd=3))
with(faithful,{plot(eruptions, waiting), abline(h = 3, col="red", lwd=3)})
with(faithful,{plot(eruptions, waiting), abline(h = 3, col="red", lwd=3)})
with(faithful,{
plot(eruptions, waiting)
abline(h = 3, col="red", lwd=3)
})
with(faithful,{
plot(eruptions, waiting)
abline(h = 3, col="red", lwd=3)
})
with(faithful,{
plot(eruptions, waiting)
abline(h = 3, col="red", lwd=3)
})
with(faithful,{
plot(eruptions, waiting)
abline(v = 3, col="red", lwd=3)
})
svg(file="myplot.svg")
with(faithful,{
plot(eruptions, waiting)
abline(v = 3, col="red", lwd=3)
})
dev.off()
faithful
head(faithful)
head(faithful)
library(lattice)
x <- xyplot(2:50)
x <- xyplot(2:50, 1:20)
x <- xyplot(c(2:50), c(1:20))
x <- xyplot(c(2,50), c(1,20))
x <- xyplot(1,2)
x <- xyplot(x=2:50, y=1:20)
x <- xyplot(2:50 ~ 1:20)
className(x)
xyplot(2:50 ~ 1:20)
bplot(2:50 ~ 1:20)
bwplot(2:50 ~ 1:20)
bwplot(2:50 ~ 1:20)
bplot(2:50 ~ 1:20)
bwplot(2:50 ~ 1:20)
xyplot(2:50 ~ 1:20)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
View(BodyWeight)
a <- xyplot(weight ~ Time | Diet, BodyWeight)
print.trellis(a)
splom(a)
par(a)
trellis.par.set()
trellis.par.set(a)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
g <- ggplot(movies, aes(votes, rating))
print(g)
movies
View(movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
a<- movies
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lines()
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lines(0)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lines(0,2)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lines(1:20)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.points(1:20)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.points(1:20, col="red")
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.points(1:20, col="red", pch=19)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lpoints(1:20, col="red", pch=19)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lpoints(1:20, col="red", pch=19)
panel.axis(side=1, labels = c('a','b'))
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lpoints(1:20, col="red", pch=19)
panel.axis(side=1, labels = c('a','b'))
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lpoints(1:20, col="red", pch=19)
panel.axis(side=1, labels = c('a','b'))
panel.lmline(1)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.axis(side=1, labels = c('a','b'))
panel.lmline(1)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.axis(side=1, labels = c('a','b'))
panel.lmline(1:5)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.axis(side=1, labels = c('a','b'))
panel.lmline(1~5)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lmline(1~5)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lmline(1,5)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lmline(1:505)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lmline(1:505,2)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lmline(1:10,1:10)
})
llines(1)
llines(2)
llines(5)
llines(1:5)
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
panel.lmline(1:10,1:10)
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
llines(1:5)
a <- xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
llines(a ,1:5)
lplot.xy(x~y, type, pch, lty, col, cex, lwd,
font, fontfamily, fontface,
col.line, col.symbol, alpha, fill,
origin = 0, ..., identifier, name.type)
llines(x, ...)
bdplot()
boxplot()
boxplot(1:3)
boxplot(c(1,1,1,2,5,8,10,0,5))
summary(c(1,1,1,2,5,8,10,0,5))
summary(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5))
boxplot(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5))
boxplot(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5))
quartie(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5))
quarters(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5))
quartiles(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5))
quart(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5))
quartiles(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,11,12,13,8,8,8,8,11,32,))
quartiles(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,11,12,13,8,8,8,8,11,32,-56))
boxplot(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,11,12,13,8,8,8,8,11,32,-56))
summary(c(1,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,1,1,2,5,8,10,0,5,11,12,13,8,8,8,8,11,32,-56))
install.packages('kernlab')
http_proxy
library(kernlab)
data("spam")
str(spam[, 1:5])
http_proxy
Sys.setenv(http_proxy = '')
Sys.setenv(https_proxy = '')
install.packages("MiKTex")
render("demo.rRmd", "pdf_document")
library(xta)
library(xtable)
print(1, type = "html")
print(table(1:3,11:13), type = "html")
write.csv(print(table(1:3,11:13), type = "html"), file ="a.txt")
c <- print(table(1:3,11:13), type = "html")
c
write.csv(c, file ="a.txt")
install.packages('xtable')
library(xtable)
airquality[1:10,]
as.table(airquality[1:10,])
as.table(airquality[1:10])
as.table(airquality[])
as.table(1:10)
as.table(1:10,1:10)
as.table(1:10,1:10,1:10)
setwd("D:/Proyectos/R/Reproducible Research/Assignment 1")
setwd("D:/Proyectos/R")
setwd("D:/Proyectos/R/Reproducible Research/RepData_PeerAssessment1")
setwd("D:/Proyectos/R/Reproducible Research/RepData_PeerAssessment1")
data <- read.csv('activity.csv')
View(data)
data <- read.csv('activity.csv', colClasses = c('int','date','int'))
className(data)
data <- read.csv('activity.csv', colClasses = c('int','date','int'))
data <- read.csv('activity.csv', colClasses = c('character','date','int'))
data <- read.csv('activity.csv', colClasses = c('int','date','character'))
data <- read.csv('activity.csv', colClasses = c('character','character','character'))
data <- read.csv('activity.csv', colClasses = c('int','character','character'))
data <- read.csv('activity.csv', colClasses = c('character','date','int'))
data <- read.csv('activity.csv', colClasses = c('int','date','character'))
data <- read.csv('activity.csv')
data <- read.csv('activity.csv', colClasses = c('integr','date','character'))
data <- read.csv('activity.csv', colClasses = c('integer','date','character'))
data <- read.csv('activity.csv', colClasses = c('integr','Date','character'))
data <- read.csv('activity.csv', colClasses = c('integer','Date','character'))
aggregate(data, FUN=mean)
aggregate(data, by = c('steps') ,FUN=mean)
aggregate(data, by = list(c('steps')) ,FUN=mean)
aggregate(data$steps, by = list(c('date')) ,FUN=mean)
aggregate(data$steps, by = list('date') ,FUN=mean)
aggregate(data$steps, by = list(date = 'date') ,FUN=mean)
aggregate(data$steps, by = list(date = 'date') ,FUN=mean)
aggregate(data$steps, by = list(date = data$date) ,FUN=mean)
aggregate(data$steps, by = list(date = data$date) ,FUN=mean, na.rm = T)
aggregate(data$steps, by = list(date = data$date) ,FUN=mean, na.rm = F)
aggregate(data$steps, by = list(date = data$date) ,FUN=mean, na.rm = T)
aggregate(data$steps, by = list(date = data$date) ,FUN=mean)
is.na(dataPrin$steps)
dataPrin <- read.csv('activity.csv', colClasses = c('integer','Date','character'))
is.na(dataPrin$steps)
aggregate(dataPrin$steps, by = list(date = dataPrin$date) ,FUN=mean)
is.na(dataPrin$steps)
dataPrin$steps[is.na(dataPrin$steps)]
dataPrin[is.na(dataPrin$steps),]
dataPrin[is.na(dataPrin$steps),'steps']
dataPrin$steps[is.na(dataPrin$steps)]
dataPrin$steps[is.na(dataPrin$steps)]<-
0
View(dataPrin)
dataPrin <- read.csv('activity.csv', colClasses = c('integer','Date','character'))
dataPrin$steps[is.na(dataPrin$steps)]<-0
aggregate(dataPrin$steps, by = list(date = dataPrin$date) ,FUN=mean)
dataPrin <- read.csv('activity.csv', colClasses = c('integer','Date','character'))
dataPrin$steps[is.na(dataPrin$steps)]<-0
aggregate(dataPrin$steps, by = list(date = dataPrin$date) ,FUN=sum)
dataPrin <- read.csv('activity.csv', colClasses = c('integer','Date','character'))
dataPrin$steps[is.na(dataPrin$steps)]<-0
aggregate(dataPrin$steps, by = list(date = dataPrin$date) ,FUN=mean)
dataPrin <- read.csv('activity.csv', colClasses = c('integer','Date','character'))
dataPrin$steps[is.na(dataPrin$steps)]<-0
aggregate(dataPrin$steps, by = list(date = dataPrin$date) ,FUN=mean)
aggregate(dataPrin$steps, by = list(date = dataPrin$date) ,FUN=sum)
aggregate(dataPrin$steps, by = list(date = dataPrin$date) ,FUN=sum)
hist(dataPrinGroup)
dataPrinGroup <- aggregate(dataPrin$steps, by = list(date = dataPrin$date) ,FUN=sum)
hist(dataPrinGroup)
dataPrinGroup <- aggregate(steps = dataPrin$steps, by = list(date = dataPrin$date) ,FUN=sum)
dataPrinGroup <- aggregate(list(steps = dataPrin$steps), by = list(date = dataPrin$date) ,FUN=sum)
dataPrin <- read.csv(
'activity.csv', colClasses = c('integer','Date','character')
)
dataPrin$steps[is.na(dataPrin$steps)]<-0
dataPrinGroup <- aggregate(
list(steps = dataPrin$steps),
by = list(date = dataPrin$date) ,FUN=sum
)
hist(dataPrinGroup$steps)
data <- dataPrin
steps_per_day <- tapply(data$steps, data$date, sum, na.rm=T)
hist(steps_per_day,
main="Steps per day",
xlab="Steps")
hist(dataPrinGroup$steps)
hist(dataPrinGroup$steps,
main="Total number of steps taken each day",
xlab = 'Number steps per day'
)
boxplot(dataPrinGroup)
boxplot(dataPrinGroup$steps)
text(0)
text(x = 0, y=0, labels = 'asdsa')
text(x = 0, y=5000, labels = 'asdsa')
text(x = 0, y=5000, labels = 'ad')
boxplot(dataPrinGroup$steps)
text(x = 0, y=5000, labels = 'ad')
text(x = 100, y=5000, labels = 'ad')
text(x = 1000, y=5000, labels = 'ad')
boxplot(dataPrinGroup$steps)
line(0,0)
boxplot(dataPrinGroup$steps)
abline(0,0)
boxplot(dataPrinGroup$steps)
abline(1,0)
boxplot(dataPrinGroup$steps)
abline(100,0)
boxplot(dataPrinGroup$steps)
abline(00,0)
boxplot(dataPrinGroup$steps)
abline(0,mean(dataPrinGroup))
boxplot(dataPrinGroup$steps)
mean(dataPrinGroup)
mean(dataPrinGroup)
mean(dataPrinGroup$steps)
boxplot(dataPrinGroup$steps)
abline(0,mean(dataPrinGroup$steps))
boxplot(dataPrinGroup$steps)
abline(mean(dataPrinGroup$steps))
boxplot(dataPrinGroup$steps)
abline(mean(dataPrinGroup$steps) ,mean(dataPrinGroup$steps))
boxplot(dataPrinGroup$steps)
abline(mean(dataPrinGroup$steps) ,mean(dataPrinGroup$steps))
boxplot(dataPrinGroup$steps)
abline(v = mean(dataPrinGroup$steps))
boxplot(dataPrinGroup$steps)
abline(h = mean(dataPrinGroup$steps))
boxplot(dataPrinGroup$steps)
abline(h = mean(dataPrinGroup$steps))
boxplot(dataPrinGroup$steps)
abline(h = mean(dataPrinGroup$steps))
abline(h = median(dataPrinGroup$steps))
